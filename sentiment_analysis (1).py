# -*- coding: utf-8 -*-
"""sentiment analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yr35ziVbhXVtuL3d-M-lSbsayH_QohAu
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("/content/EcoPreprocessed.csv")
df.rename(columns={'division':'target'}, inplace=True)
df.reset_index(drop=True,inplace=True)
y = df['target'].replace({'positive':1, 'neutral':0, 'negative':-1})
X = df['review']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
X_train

from sklearn.feature_extraction.text import HashingVectorizer
vectorizer = HashingVectorizer(n_features=2**18)
X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

def models(X_train, y_train):
    """
    A Function to make use of various ML algos
    """

    #Logistic Regression
    from sklearn.linear_model import LogisticRegression
    log = LogisticRegression(class_weight='balanced', random_state=0)
    log.fit(X_train, y_train)

    #KNearestNeighbors
    from sklearn.neighbors import KNeighborsClassifier
    knn = KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2)
    knn.fit(X_train, y_train)

    #SVC LinearKernel
    from sklearn.svm import SVC
    svc_lin = SVC(kernel='linear', random_state=0)
    svc_lin.fit(X_train, y_train)

    #SVC RBF Kernel
    from sklearn.svm import SVC
    svc_rbf = SVC(kernel='rbf', random_state=0)
    svc_rbf.fit(X_train, y_train)

    #Decision Tree
    from sklearn.tree import DecisionTreeClassifier
    tree = DecisionTreeClassifier(criterion='entropy', random_state=0)
    tree.fit(X_train, y_train)

    #Random Forest
    from sklearn.ensemble import RandomForestClassifier
    forest = RandomForestClassifier(n_estimators=50, criterion='gini',random_state=0)
    forest.fit(X_train, y_train)

    #Print the training accuracy for each models
    print('[0]Logistic Regression Training Accuracy:', log.score(X_train, y_train))
    print('[1]KN Neighbors Training Accuracy:', knn.score(X_train, y_train))
    print('[2]SVC Linear Training Accuracy:', svc_lin.score(X_train, y_train))
    print('[3]SVC RBF Training Accuracy:', svc_rbf.score(X_train, y_train))
    print('[4]Decision Tree Training Accuracy:', tree.score(X_train, y_train))
    print('[5]Random Forest Training Accuracy:', forest.score(X_train, y_train))



    return log, knn, svc_lin, svc_rbf, tree, forest

model  = models(X_train, y_train)

from sklearn.metrics import accuracy_score
y_pred = model[5].predict(X_test)
accuracy_score(y_test, y_pred)

!pip install scikit-learn --upgrade #This line ensures you have a compatible scikit-learn version

import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

y_pred = model[5].predict(X_test)
cm = confusion_matrix(y_test, y_pred)

# Create the ConfusionMatrixDisplay object
disp = ConfusionMatrixDisplay(confusion_matrix=cm,
                              display_labels=model[5].classes_) # Assuming model[5] has a classes_ attribute

# Plot the confusion matrix
disp.plot()

plt.show()

review = ['bad product']
review = vectorizer.transform(review)
predict = model[5].predict(review)

if predict == 1:
    print('Positive')
elif predict == 0:
    print('neutral')
else:
    print('negative')